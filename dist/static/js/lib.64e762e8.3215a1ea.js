"use strict";(self.webpackChunkreact_base=self.webpackChunkreact_base||[]).push([[243],{5014:function(e,t,r){function n(e,t){let r;try{r=e()}catch(e){return}return{getItem:e=>{var n;const a=e=>null===e?null:JSON.parse(e,null==t?void 0:t.reviver),i=null!=(n=r.getItem(e))?n:null;return i instanceof Promise?i.then(a):a(i)},setItem:(e,n)=>r.setItem(e,JSON.stringify(n,null==t?void 0:t.replacer)),removeItem:e=>r.removeItem(e)}}r.d(t,{Zr:function(){return i}});const a=e=>t=>{try{const r=e(t);return r instanceof Promise?r:{then(e){return a(e)(r)},catch(e){return this}}}catch(e){return{then(e){return this},catch(t){return a(t)(e)}}}},i=(e,t)=>"getStorage"in t||"serialize"in t||"deserialize"in t?(console.warn("[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead."),((e,t)=>(r,n,i)=>{let o={getStorage:()=>localStorage,serialize:JSON.stringify,deserialize:JSON.parse,partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},s=!1;const l=new Set,c=new Set;let u;try{u=o.getStorage()}catch(e){}if(!u)return e(((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${o.name}', the given storage is currently unavailable.`),r(...e)}),n,i);const d=a(o.serialize),g=()=>{const e=o.partialize({...n()});let t;const r=d({state:e,version:o.version}).then((e=>u.setItem(o.name,e))).catch((e=>{t=e}));if(t)throw t;return r},m=i.setState;i.setState=(e,t)=>{m(e,t),g()};const v=e(((...e)=>{r(...e),g()}),n,i);let h;const f=()=>{var e;if(!u)return;s=!1,l.forEach((e=>e(n())));const t=(null==(e=o.onRehydrateStorage)?void 0:e.call(o,n()))||void 0;return a(u.getItem.bind(u))(o.name).then((e=>{if(e)return o.deserialize(e)})).then((e=>{if(e){if("number"!=typeof e.version||e.version===o.version)return e.state;if(o.migrate)return o.migrate(e.state,e.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}})).then((e=>{var t;return h=o.merge(e,null!=(t=n())?t:v),r(h,!0),g()})).then((()=>{null==t||t(h,void 0),s=!0,c.forEach((e=>e(h)))})).catch((e=>{null==t||t(void 0,e)}))};return i.persist={setOptions:e=>{o={...o,...e},e.getStorage&&(u=e.getStorage())},clearStorage:()=>{null==u||u.removeItem(o.name)},getOptions:()=>o,rehydrate:()=>f(),hasHydrated:()=>s,onHydrate:e=>(l.add(e),()=>{l.delete(e)}),onFinishHydration:e=>(c.add(e),()=>{c.delete(e)})},f(),h||v})(e,t)):((e,t)=>(r,i,o)=>{let s={storage:n((()=>localStorage)),partialize:e=>e,version:0,merge:(e,t)=>({...t,...e}),...t},l=!1;const c=new Set,u=new Set;let d=s.storage;if(!d)return e(((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${s.name}', the given storage is currently unavailable.`),r(...e)}),i,o);const g=()=>{const e=s.partialize({...i()});return d.setItem(s.name,{state:e,version:s.version})},m=o.setState;o.setState=(e,t)=>{m(e,t),g()};const v=e(((...e)=>{r(...e),g()}),i,o);let h;o.getInitialState=()=>v;const f=()=>{var e,t;if(!d)return;l=!1,c.forEach((e=>{var t;return e(null!=(t=i())?t:v)}));const n=(null==(t=s.onRehydrateStorage)?void 0:t.call(s,null!=(e=i())?e:v))||void 0;return a(d.getItem.bind(d))(s.name).then((e=>{if(e){if("number"!=typeof e.version||e.version===s.version)return e.state;if(s.migrate)return s.migrate(e.state,e.version);console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}})).then((e=>{var t;return h=s.merge(e,null!=(t=i())?t:v),r(h,!0),g()})).then((()=>{null==n||n(h,void 0),h=i(),l=!0,u.forEach((e=>e(h)))})).catch((e=>{null==n||n(void 0,e)}))};return o.persist={setOptions:e=>{s={...s,...e},e.storage&&(d=e.storage)},clearStorage:()=>{null==d||d.removeItem(s.name)},getOptions:()=>s,rehydrate:()=>f(),hasHydrated:()=>l,onHydrate:e=>(c.add(e),()=>{c.delete(e)}),onFinishHydration:e=>(u.add(e),()=>{u.delete(e)})},s.skipHydration||f(),h||v})(e,t)}}]);